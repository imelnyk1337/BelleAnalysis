import sysimport ROOTfrom typing import List, LiteralString, Dict, SupportsFloat, SupportsInt, UnionCUTS = Dict[str, Union[int, float, SupportsInt, SupportsFloat]]class CutsManager:    _initial_cuts_dict = None    _current_cuts_dict = None    _number_of_instances = 0    def __init__(self, target: str):        self._targeting_variable = target        self._top_gen_criterion = None        self._rejection_fraction = -1.        CutsManager._number_of_instances += 1        self._output_cuts_string = str()    @classmethod    def init(cls, dict_like) -> None:        cls._initial_cuts_dict = dict_like        cls._current_cuts_dict = cls.initial_cuts_dict    @classmethod    def update(cls, dict_like) -> None:        cls._current_cuts_dict = dict_like    def generate(self, on_gen_level: Union[bool, int] = False) -> str:        assert CutsManager._current_cuts_dict is not None        if CutsManager._current_cuts_dict is not None:            for key, value in CutsManager._current_cuts_dict:                if value:                    sys.exit()                self._output_cuts_string += ""        return self._targeting_variable + "_hohoho"if __name__ == "__main__":    example_cuts_dict = {        "mbc_bs": [5.2, 5.6],        "de_bs": [-0.25, 0.25],        "eg1_d": [0.1, None]    }